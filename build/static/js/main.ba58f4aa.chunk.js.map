{"version":3,"sources":["assets/deployment.svg","assets/github.svg","assets/twitter.svg","assets/undraw-webdev.png","components/Navbar/Navbar.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","id","src","Logo","alt","href","Github","Twitter","Home","useEffect","className","WebDev","App","customHistory","createBrowserHistory","history","fallback","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,qRCK9BC,EAA4B,WACvC,OACE,0BAAMC,GAAG,UACP,6BAASA,GAAG,QACV,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,wDAEF,6BAASH,GAAG,SACV,mCACA,oCACA,wCACA,kCAEF,6BAASA,GAAG,WACV,uBAAGI,KAAK,6BACN,yBAAKH,IAAKI,IAAQF,IAAI,iBAExB,uBAAGC,KAAK,+BACN,yBAAKH,IAAKK,IAASH,IAAI,qB,iBCjBpBI,G,YAA0B,WAKrC,OAJCC,qBAAU,WACN,OAAO,eAER,IAEF,0BAAMR,GAAG,QACP,kBAAC,EAAD,MACA,6BAASA,GAAG,SACV,yBAAKS,UAAU,8BACb,gGAGA,yBAAKA,UAAU,iBACb,4BAAQA,UAAU,WAAlB,iBACA,4BAAQA,UAAU,QAAlB,cAGJ,yBAAKA,UAAU,mBACb,yBAAKR,IAAKS,IAAQP,IAAI,gBAAgBM,UAAW,iBCJ5CE,EAfgB,WAC7B,IAAMC,EAAgBC,cACtB,OACE,kBAAC,IAAD,CAAQC,QAASF,GACf,kBAAC,WAAD,CAAUG,SAAU,oCAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,WCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba58f4aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deployment.cdb1ea9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.b2d4e916.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.9f3108f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/undraw-webdev.b588b3be.png\";","import React from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport Logo from \"../../assets/deployment.svg\";\r\nimport Github from \"../../assets/github.svg\";\r\nimport Twitter from \"../../assets/twitter.svg\";\r\nexport const Navbar: () => JSX.Element = () => {\r\n  return (\r\n    <main id=\"navbar\">\r\n      <section id=\"logo\">\r\n        <img src={Logo} alt=\"logo\" />\r\n        <h2>Victor Campos Portfolio</h2>\r\n      </section>\r\n      <section id=\"links\">\r\n        <p>Home</p>\r\n        <p>About</p>\r\n        <p>Portfolio</p>\r\n        <p>CV</p>\r\n      </section>\r\n      <section id=\"socials\">\r\n        <a href=\"https://github.com/camvaz\">\r\n          <img src={Github} alt=\"Github logo\" />\r\n        </a>\r\n        <a href=\"https://twitter.com/camvazz\">\r\n          <img src={Twitter} alt=\"Twitter logo\" />\r\n        </a>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Navbar } from \"../Navbar/Navbar\";\r\nimport WebDev from \"../../assets/undraw-webdev.png\";\r\nimport \"./Home.scss\";\r\nimport \"animate.css\";\r\n\r\nexport const Home: () => JSX.Element = () => {\r\n   useEffect(() => {\r\n       return () => {\r\n       }\r\n   }, [])\r\n  return (\r\n    <main id=\"home\">\r\n      <Navbar />\r\n      <section id=\"intro\">\r\n        <div className=\"intro-text animated fadeIn\">\r\n          <h1>\r\n            Delivering clean and modern digital experiences through the web.\r\n          </h1>\r\n          <div className=\"btn-container\">\r\n            <button className=\"naranja\">See portfolio</button>\r\n            <button className=\"gris\">Go to CV</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"image-container\">\r\n          <img src={WebDev} alt=\"Web developer\" className={'animate'} />\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n","import React, {Suspense} from 'react';\nimport {Router, Switch, Route} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport './App.scss';\nimport {Home} from './components/Home/Home';\n\nconst App: () => JSX.Element = () => {\n  const customHistory = createBrowserHistory();\n  return (\n    <Router history={customHistory}>\n      <Suspense fallback={<div>ke</div>}>\n        <Switch>\n          <Route path='/' exact>\n            <Home/>\n          </Route>\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}